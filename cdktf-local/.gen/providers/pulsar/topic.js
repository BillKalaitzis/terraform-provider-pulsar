"use strict";
// https://www.terraform.io/docs/providers/pulsar/r/topic.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Topic = void 0;
const cdktf = require("cdktf");
function topicPermissionGrantToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        actions: cdktf.listMapper(cdktf.stringToTerraform)(struct.actions),
        role: cdktf.stringToTerraform(struct.role),
    };
}
/**
* Represents a {@link https://www.terraform.io/docs/providers/pulsar/r/topic.html pulsar_topic}
*/
class Topic extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/pulsar/r/topic.html pulsar_topic} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options TopicConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'pulsar_topic',
            terraformGeneratorMetadata: {
                providerName: 'pulsar'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._namespace = config.namespace;
        this._partitions = config.partitions;
        this._tenant = config.tenant;
        this._topicName = config.topicName;
        this._topicType = config.topicType;
        this._permissionGrant = config.permissionGrant;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get namespace() {
        return this.getStringAttribute('namespace');
    }
    set namespace(value) {
        this._namespace = value;
    }
    // Temporarily expose input value. Use with caution.
    get namespaceInput() {
        return this._namespace;
    }
    get partitions() {
        return this.getNumberAttribute('partitions');
    }
    set partitions(value) {
        this._partitions = value;
    }
    // Temporarily expose input value. Use with caution.
    get partitionsInput() {
        return this._partitions;
    }
    get tenant() {
        return this.getStringAttribute('tenant');
    }
    set tenant(value) {
        this._tenant = value;
    }
    // Temporarily expose input value. Use with caution.
    get tenantInput() {
        return this._tenant;
    }
    get topicName() {
        return this.getStringAttribute('topic_name');
    }
    set topicName(value) {
        this._topicName = value;
    }
    // Temporarily expose input value. Use with caution.
    get topicNameInput() {
        return this._topicName;
    }
    get topicType() {
        return this.getStringAttribute('topic_type');
    }
    set topicType(value) {
        this._topicType = value;
    }
    // Temporarily expose input value. Use with caution.
    get topicTypeInput() {
        return this._topicType;
    }
    get permissionGrant() {
        return this.interpolationForAttribute('permission_grant');
    }
    set permissionGrant(value) {
        this._permissionGrant = value;
    }
    resetPermissionGrant() {
        this._permissionGrant = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionGrantInput() {
        return this._permissionGrant;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            namespace: cdktf.stringToTerraform(this._namespace),
            partitions: cdktf.numberToTerraform(this._partitions),
            tenant: cdktf.stringToTerraform(this._tenant),
            topic_name: cdktf.stringToTerraform(this._topicName),
            topic_type: cdktf.stringToTerraform(this._topicType),
            permission_grant: cdktf.listMapper(topicPermissionGrantToTerraform)(this._permissionGrant),
        };
    }
}
exports.Topic = Topic;
// =================
// STATIC PROPERTIES
// =================
Topic.tfResourceType = "pulsar_topic";
//# sourceMappingURL=data:application/json;base64,