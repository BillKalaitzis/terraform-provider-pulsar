"use strict";
// https://www.terraform.io/docs/providers/pulsar/r/namespace.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Namespace = void 0;
const cdktf = require("cdktf");
function namespaceBacklogQuotaToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        limit_bytes: cdktf.stringToTerraform(struct.limitBytes),
        policy: cdktf.stringToTerraform(struct.policy),
    };
}
function namespaceDispatchRateToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        dispatch_byte_throttling_rate: cdktf.numberToTerraform(struct.dispatchByteThrottlingRate),
        dispatch_msg_throttling_rate: cdktf.numberToTerraform(struct.dispatchMsgThrottlingRate),
        rate_period_seconds: cdktf.numberToTerraform(struct.ratePeriodSeconds),
    };
}
function namespaceNamespaceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        anti_affinity: cdktf.stringToTerraform(struct.antiAffinity),
        max_consumers_per_subscription: cdktf.numberToTerraform(struct.maxConsumersPerSubscription),
        max_consumers_per_topic: cdktf.numberToTerraform(struct.maxConsumersPerTopic),
        max_producers_per_topic: cdktf.numberToTerraform(struct.maxProducersPerTopic),
        replication_clusters: cdktf.listMapper(cdktf.stringToTerraform)(struct.replicationClusters),
        schema_compatibility_strategy: cdktf.stringToTerraform(struct.schemaCompatibilityStrategy),
        schema_validation_enforce: cdktf.booleanToTerraform(struct.schemaValidationEnforce),
    };
}
function namespacePermissionGrantToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        actions: cdktf.listMapper(cdktf.stringToTerraform)(struct.actions),
        role: cdktf.stringToTerraform(struct.role),
    };
}
function namespacePersistencePoliciesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bookkeeper_ack_quorum: cdktf.numberToTerraform(struct.bookkeeperAckQuorum),
        bookkeeper_ensemble: cdktf.numberToTerraform(struct.bookkeeperEnsemble),
        bookkeeper_write_quorum: cdktf.numberToTerraform(struct.bookkeeperWriteQuorum),
        managed_ledger_max_mark_delete_rate: cdktf.numberToTerraform(struct.managedLedgerMaxMarkDeleteRate),
    };
}
function namespaceRetentionPoliciesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        retention_minutes: cdktf.stringToTerraform(struct.retentionMinutes),
        retention_size_in_mb: cdktf.stringToTerraform(struct.retentionSizeInMb),
    };
}
/**
* Represents a {@link https://www.terraform.io/docs/providers/pulsar/r/namespace.html pulsar_namespace}
*/
class Namespace extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/pulsar/r/namespace.html pulsar_namespace} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options NamespaceConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'pulsar_namespace',
            terraformGeneratorMetadata: {
                providerName: 'pulsar'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._enableDeduplication = config.enableDeduplication;
        this._namespace = config.namespace;
        this._tenant = config.tenant;
        this._backlogQuota = config.backlogQuota;
        this._dispatchRate = config.dispatchRate;
        this._namespaceConfig = config.namespaceConfig;
        this._permissionGrant = config.permissionGrant;
        this._persistencePolicies = config.persistencePolicies;
        this._retentionPolicies = config.retentionPolicies;
    }
    get enableDeduplication() {
        return this.getBooleanAttribute('enable_deduplication');
    }
    set enableDeduplication(value) {
        this._enableDeduplication = value;
    }
    resetEnableDeduplication() {
        this._enableDeduplication = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableDeduplicationInput() {
        return this._enableDeduplication;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get namespace() {
        return this.getStringAttribute('namespace');
    }
    set namespace(value) {
        this._namespace = value;
    }
    // Temporarily expose input value. Use with caution.
    get namespaceInput() {
        return this._namespace;
    }
    get tenant() {
        return this.getStringAttribute('tenant');
    }
    set tenant(value) {
        this._tenant = value;
    }
    // Temporarily expose input value. Use with caution.
    get tenantInput() {
        return this._tenant;
    }
    get backlogQuota() {
        return this.interpolationForAttribute('backlog_quota');
    }
    set backlogQuota(value) {
        this._backlogQuota = value;
    }
    resetBacklogQuota() {
        this._backlogQuota = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backlogQuotaInput() {
        return this._backlogQuota;
    }
    get dispatchRate() {
        return this.interpolationForAttribute('dispatch_rate');
    }
    set dispatchRate(value) {
        this._dispatchRate = value;
    }
    resetDispatchRate() {
        this._dispatchRate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dispatchRateInput() {
        return this._dispatchRate;
    }
    get namespaceConfig() {
        return this.interpolationForAttribute('namespace_config');
    }
    set namespaceConfig(value) {
        this._namespaceConfig = value;
    }
    resetNamespaceConfig() {
        this._namespaceConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get namespaceConfigInput() {
        return this._namespaceConfig;
    }
    get permissionGrant() {
        return this.interpolationForAttribute('permission_grant');
    }
    set permissionGrant(value) {
        this._permissionGrant = value;
    }
    resetPermissionGrant() {
        this._permissionGrant = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionGrantInput() {
        return this._permissionGrant;
    }
    get persistencePolicies() {
        return this.interpolationForAttribute('persistence_policies');
    }
    set persistencePolicies(value) {
        this._persistencePolicies = value;
    }
    resetPersistencePolicies() {
        this._persistencePolicies = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get persistencePoliciesInput() {
        return this._persistencePolicies;
    }
    get retentionPolicies() {
        return this.interpolationForAttribute('retention_policies');
    }
    set retentionPolicies(value) {
        this._retentionPolicies = value;
    }
    resetRetentionPolicies() {
        this._retentionPolicies = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retentionPoliciesInput() {
        return this._retentionPolicies;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            enable_deduplication: cdktf.booleanToTerraform(this._enableDeduplication),
            namespace: cdktf.stringToTerraform(this._namespace),
            tenant: cdktf.stringToTerraform(this._tenant),
            backlog_quota: cdktf.listMapper(namespaceBacklogQuotaToTerraform)(this._backlogQuota),
            dispatch_rate: cdktf.listMapper(namespaceDispatchRateToTerraform)(this._dispatchRate),
            namespace_config: cdktf.listMapper(namespaceNamespaceConfigToTerraform)(this._namespaceConfig),
            permission_grant: cdktf.listMapper(namespacePermissionGrantToTerraform)(this._permissionGrant),
            persistence_policies: cdktf.listMapper(namespacePersistencePoliciesToTerraform)(this._persistencePolicies),
            retention_policies: cdktf.listMapper(namespaceRetentionPoliciesToTerraform)(this._retentionPolicies),
        };
    }
}
exports.Namespace = Namespace;
// =================
// STATIC PROPERTIES
// =================
Namespace.tfResourceType = "pulsar_namespace";
//# sourceMappingURL=data:application/json;base64,