"use strict";
// https://www.terraform.io/docs/providers/pulsar
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.PulsarProvider = void 0;
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/pulsar pulsar}
*/
class PulsarProvider extends cdktf.TerraformProvider {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/pulsar pulsar} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options PulsarProviderConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'pulsar',
            terraformGeneratorMetadata: {
                providerName: 'pulsar',
                providerVersionConstraint: '~>1.0.0'
            },
            terraformProviderSource: 'quantummetric/pulsar'
        });
        this._apiVersion = config.apiVersion;
        this._tlsAllowInsecureConnection = config.tlsAllowInsecureConnection;
        this._tlsTrustCertsFilePath = config.tlsTrustCertsFilePath;
        this._token = config.token;
        this._webServiceUrl = config.webServiceUrl;
        this._alias = config.alias;
    }
    get apiVersion() {
        return this._apiVersion;
    }
    set apiVersion(value) {
        this._apiVersion = value;
    }
    resetApiVersion() {
        this._apiVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get apiVersionInput() {
        return this._apiVersion;
    }
    get tlsAllowInsecureConnection() {
        return this._tlsAllowInsecureConnection;
    }
    set tlsAllowInsecureConnection(value) {
        this._tlsAllowInsecureConnection = value;
    }
    resetTlsAllowInsecureConnection() {
        this._tlsAllowInsecureConnection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tlsAllowInsecureConnectionInput() {
        return this._tlsAllowInsecureConnection;
    }
    get tlsTrustCertsFilePath() {
        return this._tlsTrustCertsFilePath;
    }
    set tlsTrustCertsFilePath(value) {
        this._tlsTrustCertsFilePath = value;
    }
    resetTlsTrustCertsFilePath() {
        this._tlsTrustCertsFilePath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tlsTrustCertsFilePathInput() {
        return this._tlsTrustCertsFilePath;
    }
    get token() {
        return this._token;
    }
    set token(value) {
        this._token = value;
    }
    resetToken() {
        this._token = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tokenInput() {
        return this._token;
    }
    get webServiceUrl() {
        return this._webServiceUrl;
    }
    set webServiceUrl(value) {
        this._webServiceUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get webServiceUrlInput() {
        return this._webServiceUrl;
    }
    get alias() {
        return this._alias;
    }
    set alias(value) {
        this._alias = value;
    }
    resetAlias() {
        this._alias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aliasInput() {
        return this._alias;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            api_version: cdktf.stringToTerraform(this._apiVersion),
            tls_allow_insecure_connection: cdktf.booleanToTerraform(this._tlsAllowInsecureConnection),
            tls_trust_certs_file_path: cdktf.stringToTerraform(this._tlsTrustCertsFilePath),
            token: cdktf.stringToTerraform(this._token),
            web_service_url: cdktf.stringToTerraform(this._webServiceUrl),
            alias: cdktf.stringToTerraform(this._alias),
        };
    }
}
exports.PulsarProvider = PulsarProvider;
// =================
// STATIC PROPERTIES
// =================
PulsarProvider.tfResourceType = "pulsar";
//# sourceMappingURL=data:application/json;base64,