"use strict";
// https://www.terraform.io/docs/providers/pulsar/r/cluster.html
// generated from terraform resource schema
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cluster = void 0;
const cdktf = require("cdktf");
function clusterClusterDataToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        broker_service_url: cdktf.stringToTerraform(struct.brokerServiceUrl),
        broker_service_url_tls: cdktf.stringToTerraform(struct.brokerServiceUrlTls),
        peer_clusters: cdktf.listMapper(cdktf.stringToTerraform)(struct.peerClusters),
        web_service_url: cdktf.stringToTerraform(struct.webServiceUrl),
        web_service_url_tls: cdktf.stringToTerraform(struct.webServiceUrlTls),
    };
}
/**
* Represents a {@link https://www.terraform.io/docs/providers/pulsar/r/cluster.html pulsar_cluster}
*/
class Cluster extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/pulsar/r/cluster.html pulsar_cluster} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ClusterConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'pulsar_cluster',
            terraformGeneratorMetadata: {
                providerName: 'pulsar'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._cluster = config.cluster;
        this._clusterData = config.clusterData;
    }
    get cluster() {
        return this.getStringAttribute('cluster');
    }
    set cluster(value) {
        this._cluster = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterInput() {
        return this._cluster;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get clusterData() {
        return this.interpolationForAttribute('cluster_data');
    }
    set clusterData(value) {
        this._clusterData = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterDataInput() {
        return this._clusterData;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cluster: cdktf.stringToTerraform(this._cluster),
            cluster_data: cdktf.listMapper(clusterClusterDataToTerraform)(this._clusterData),
        };
    }
}
exports.Cluster = Cluster;
// =================
// STATIC PROPERTIES
// =================
Cluster.tfResourceType = "pulsar_cluster";
//# sourceMappingURL=data:application/json;base64,